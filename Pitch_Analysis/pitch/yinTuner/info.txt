YIN Tuner

by Antonis Dalatsis
ICSD, University of the Aegean
Samos, March 2015


This is a pitch detector, suitable for tuning any instrument to the standard (12TET) system.

Back in the days when there was no decent web app to tune my guitar, I wanted to build one myself. I talked to my instructor and she proposed me a thesis on pitch detection. I started with java.. but java is not a tool for research. So there you go.

It receives any sound from the mic input, detects its pitch, and displays its distance from the nearest note. For pitch detection it implements the YIN estimation algorithm, considered the best of all publicly available methods.


Use microphone or plug your instrument directly into mic-in for better capture.
Mic sensitivity can be adjusted from your system's recording controls, or by the noiselvl variable in yint.m.

Choose a compiler that works:
>> mex -setup

Compile the MEX file:
>> mex dfopt.c

Run it:
>> tuner

Work with cents instead of hertz:
set accuracy=0 in yint.m 


The application is kept as simple as possible. There may follow a version with more UI options. 
I am currently working on the web version built entirely on open web technology (html/css and js).

Leave feedback!!! especially if it's bad. Or comment. Thanks.

In my thesis "Fundamental frequency estimation for music signals" [1] you can find everything you need to know in order to grasp the concept of pitch detection. How sound is created, music theory basics, a neat explanation of Fourier analysis, and also a simple method that matches YIN's performance in real-time execution. Text is in Greek.

[1] http://hellanicus.lib.aegean.gr/handle/11610/8650


Thanks to all those who share their work.
Dedicated to the, I hope still alive, metal community \m/




Guitar open strings
E2  82.41 (6th)
A2 110.00 (5th)
D3 146.83 (4th)
G3 196.00 (3rd)
B3 246.94 (2nd)
E4 329.63 (1st)


Note Frequency Table
        Octave
Note    0       1       2       3       4       5       6       7       8       9       10
C       16.352  32.703  65.406  130.81  261.63  523.25  1046.5  2093.0  4186.0  8372.0  16744.0
C#/Db   17.324  34.648  69.296  138.59  277.18  554.37  1108.7  2217.5  4434.9  8869.8  17739.7
D       18.354  36.708  73.416  146.83  293.66  587.33  1174.7  2349.3  4698.6  9397.3  18794.5
D#/Eb   19.445  38.891  77.782  155.56  311.13  622.25  1244.5  2489.0  4978.0  9956.1  19912.1
E       20.602  41.203  82.407  164.81  329.63  659.26  1318.5  2637.0  5274.0  10548.1 21096.2
F       21.827  43.654  87.307  174.61  349.23  698.46  1396.9  2793.8  5587.7  11175.3 22350.6
F#/Gb   23.125  46.249  92.499  185.00  369.99  739.99  1480.0  2960.0  5919.9  11839.8 23679.6
G       24.500  48.999  97.999  196.00  392.00  783.99  1568.0  3136.0  6271.9  12543.9 25087.7
G#/Ab   25.957  51.913  103.83  207.65  415.30  830.61  1661.2  3322.4  6644.9  13289.8 26579.5
A       27.500  55.000  110.00  220.00  440.00  880.00  1760.0  3520.0  7040.0  14080.0 28160.0
A#/Bb   29.135  58.270  116.54  233.08  466.16  932.33  1864.7  3729.3  7458.6  14917.2 29834.5
B       30.868  61.735  123.47  246.94  493.88  987.77  1975.5  3951.1  7902.1  15804.3 31608.5


Hertz or cents?
Cents is the standard way for measuring note distances in tuners, but I also like hertz.
Note frequencies are measured in hetrz, but it is not a very converient unit for distance.
E2 is 4.9Hz away from F2 while E4 is 19.6Hz away from F4, although this is still a semitone.
With cents this varying distance is mapped to 100 equal units, the cents, so it's like a percentage.
E2 is 100 cents away for F2 and the boundary between them is 50 cents. Same goes for E4 and F4.
Hertz is acceptably inconvenient for the guitar though. 1Hz is 21cents for E2 and 5cents for E4.


Range
Detection range is 40Hz to 11KHz, set by fmin and fmax variables.
fmin is intrinsically related to speed, the bigger the faster.
