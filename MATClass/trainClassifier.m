function [trainedClassifier, validationAccuracy] = trainClassifier(trainingData)
% [trainedClassifier, validationAccuracy] = trainClassifier(trainingData)
% returns a trained classifier and its accuracy. This code recreates the
% classification model trained in Classification Learner app. Use the
% generated code to automate training the same model with new data, or to
% learn how to programmatically train models.
%
%  Input:
%      trainingData: a table containing the same predictor and response
%       columns as imported into the app.
%
%  Output:
%      trainedClassifier: a struct containing the trained classifier. The
%       struct contains various fields with information about the trained
%       classifier.
%
%      trainedClassifier.predictFcn: a function to make predictions on new
%       data.
%
%      validationAccuracy: a double containing the accuracy in percent. In
%       the app, the History list displays this overall accuracy score for
%       each model.
%
% Use the code to train the model with new data. To retrain your
% classifier, call the function from the command line with your original
% data or new data as the input argument trainingData.
%
% For example, to retrain a classifier trained with the original data set
% T, enter:
%   [trainedClassifier, validationAccuracy] = trainClassifier(T)
%
% To make predictions with the returned 'trainedClassifier' on new data T2,
% use
%   yfit = trainedClassifier.predictFcn(T2)
%
% T2 must be a table containing at least the same predictor columns as used
% during training. For details, enter:
%   trainedClassifier.HowToPredict

% Auto-generated by MATLAB on 25-Feb-2019 18:55:53


% Extract predictors and response
% This code processes the data into the right shape for training the
% model.
inputTable = trainingData;
predictorNames = {'F0Dev', 'F0Mean', 'SSERat41', 'SSERat42', 'MFCC1', 'MFCC2', 'MFCC3', 'MFCC4', 'MFCC5', 'MFCC6', 'MFCC7', 'MFCC8', 'MFCC9', 'MFCC10', 'MFCC11', 'MFCC12', 'MFCC13', 'MFCCdev1', 'MFCCdev2', 'MFCCdev3', 'MFCCdev4', 'MFCCdev5', 'MFCCdev6', 'MFCCdev7', 'MFCCdev8', 'MFCCdev9', 'MFCCdev10', 'MFCCdev11', 'MFCCdev12', 'MFCCdev13', 'dMFCC1', 'dMFCC2', 'dMFCC3', 'dMFCC4', 'dMFCC5', 'dMFCC6', 'dMFCC7', 'dMFCC8', 'dMFCC9', 'dMFCC10', 'dMFCC11', 'dMFCC12', 'dMFCC13', 'dMFCCd1', 'dMFCCd2', 'dMFCCd3', 'dMFCCd4', 'dMFCCd5', 'dMFCCd6', 'dMFCCd7', 'dMFCCd8', 'dMFCCd9', 'dMFCCd10', 'dMFCCd11', 'dMFCCd12', 'dMFCCd13'};
predictors = inputTable(:, predictorNames);
response = inputTable.Label;
isCategoricalPredictor = [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false];

% Train a classifier
% This code specifies all the classifier options and trains the classifier.
classificationSVM = fitcsvm(...
    predictors, ...
    response, ...
    'KernelFunction', 'gaussian', ...
    'PolynomialOrder', [], ...
    'KernelScale', 1.9, ...
    'BoxConstraint', 1, ...
    'Standardize', true, ...
    'ClassNames', [-1; 1]);

% Create the result struct with predict function
predictorExtractionFcn = @(t) t(:, predictorNames);
svmPredictFcn = @(x) predict(classificationSVM, x);
trainedClassifier.predictFcn = @(x) svmPredictFcn(predictorExtractionFcn(x));

% Add additional fields to the result struct
trainedClassifier.RequiredVariables = {'F0Dev', 'F0Mean', 'SSERat41', 'SSERat42', 'MFCC1', 'MFCC2', 'MFCC3', 'MFCC4', 'MFCC5', 'MFCC6', 'MFCC7', 'MFCC8', 'MFCC9', 'MFCC10', 'MFCC11', 'MFCC12', 'MFCC13', 'MFCCdev1', 'MFCCdev2', 'MFCCdev3', 'MFCCdev4', 'MFCCdev5', 'MFCCdev6', 'MFCCdev7', 'MFCCdev8', 'MFCCdev9', 'MFCCdev10', 'MFCCdev11', 'MFCCdev12', 'MFCCdev13', 'dMFCC1', 'dMFCC2', 'dMFCC3', 'dMFCC4', 'dMFCC5', 'dMFCC6', 'dMFCC7', 'dMFCC8', 'dMFCC9', 'dMFCC10', 'dMFCC11', 'dMFCC12', 'dMFCC13', 'dMFCCd1', 'dMFCCd2', 'dMFCCd3', 'dMFCCd4', 'dMFCCd5', 'dMFCCd6', 'dMFCCd7', 'dMFCCd8', 'dMFCCd9', 'dMFCCd10', 'dMFCCd11', 'dMFCCd12', 'dMFCCd13'};
trainedClassifier.ClassificationSVM = classificationSVM;
trainedClassifier.About = 'This struct is a trained model exported from Classification Learner R2018b.';
trainedClassifier.HowToPredict = sprintf('To make predictions on a new table, T, use: \n  yfit = c.predictFcn(T) \nreplacing ''c'' with the name of the variable that is this struct, e.g. ''trainedModel''. \n \nThe table, T, must contain the variables returned by: \n  c.RequiredVariables \nVariable formats (e.g. matrix/vector, datatype) must match the original training data. \nAdditional variables are ignored. \n \nFor more information, see <a href="matlab:helpview(fullfile(docroot, ''stats'', ''stats.map''), ''appclassification_exportmodeltoworkspace'')">How to predict using an exported model</a>.');

% Extract predictors and response
% This code processes the data into the right shape for training the
% model.
inputTable = trainingData;
predictorNames = {'F0Dev', 'F0Mean', 'SSERat41', 'SSERat42', 'MFCC1', 'MFCC2', 'MFCC3', 'MFCC4', 'MFCC5', 'MFCC6', 'MFCC7', 'MFCC8', 'MFCC9', 'MFCC10', 'MFCC11', 'MFCC12', 'MFCC13', 'MFCCdev1', 'MFCCdev2', 'MFCCdev3', 'MFCCdev4', 'MFCCdev5', 'MFCCdev6', 'MFCCdev7', 'MFCCdev8', 'MFCCdev9', 'MFCCdev10', 'MFCCdev11', 'MFCCdev12', 'MFCCdev13', 'dMFCC1', 'dMFCC2', 'dMFCC3', 'dMFCC4', 'dMFCC5', 'dMFCC6', 'dMFCC7', 'dMFCC8', 'dMFCC9', 'dMFCC10', 'dMFCC11', 'dMFCC12', 'dMFCC13', 'dMFCCd1', 'dMFCCd2', 'dMFCCd3', 'dMFCCd4', 'dMFCCd5', 'dMFCCd6', 'dMFCCd7', 'dMFCCd8', 'dMFCCd9', 'dMFCCd10', 'dMFCCd11', 'dMFCCd12', 'dMFCCd13'};
predictors = inputTable(:, predictorNames);
response = inputTable.Label;
isCategoricalPredictor = [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false];

% Perform cross-validation
partitionedModel = crossval(trainedClassifier.ClassificationSVM, 'KFold', 5);

% Compute validation predictions
[validationPredictions, validationScores] = kfoldPredict(partitionedModel);

% Compute validation accuracy
validationAccuracy = 1 - kfoldLoss(partitionedModel, 'LossFun', 'ClassifError');
